<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g = global_debugger_OBJ.id
c = global_debugger_OBJ.config
pid = 0
ingame = 0

up_press = 0
down_press = 0
left_press = 0
right_press = 0
fire_press = 0
altfire_press = 0
shield_press = 0
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(c.keys[pid,7])) {
    // pause
    if (ingame == 1) {
        if (g.pause == 0) then {
            g.pause = 1
            instance_deactivate_all(true)
            instance_create(0,0,pause_OBJ)
            instance_activate_object(g)
            instance_activate_object(c)
            exit;
        } else {
            g.alarm[2] = 1
        }
    }
}

if (keyboard_check_pressed(c.keys[pid,0])) up_press = 1
if (keyboard_check_released(c.keys[pid,0])) up_press = 0

if (keyboard_check_pressed(c.keys[pid,1])) down_press = 1
if (keyboard_check_released(c.keys[pid,1])) down_press = 0

if (keyboard_check_pressed(c.keys[pid,2])) left_press = 1
if (keyboard_check_released(c.keys[pid,2])) left_press = 0

if (keyboard_check_pressed(c.keys[pid,3])) right_press = 1
if (keyboard_check_released(c.keys[pid,3])) right_press = 0

if (keyboard_check_pressed(c.keys[pid,4])) then {
    if (pid == 0 &amp;&amp; instance_exists(ctr_fire_OBJ)) then {
        if (ctr_fire_OBJ.my_backdrop.state == 0) then {
        fire_press = 1
        }
    } else {fire_press = 1}
}
if (keyboard_check_released(c.keys[pid,4])) fire_press = 0

if (keyboard_check_pressed(c.keys[pid,5])) altfire_press = 1
if (keyboard_check_released(c.keys[pid,5])) altfire_press = 0

if (keyboard_check_pressed(c.keys[pid,6])) shield_press = 1
if (keyboard_check_released(c.keys[pid,6])) shield_press = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
