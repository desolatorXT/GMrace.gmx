<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>boss1_x_SPR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>boss_PAR</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
max_hp = 1600
hp = 1600

speed = 0.5
direction = 180

active = 0
invincible = 1

shield_frm = 0

angle = 0
rot_spd = 4
rotating = 1

state = 0
counter_ss = 0
counter_ls = 0

projectile_ls = noone

target_x = 0
target_y = 0

behavior[0] = behavior_xs
behavior[1] = behavior_ls
behavior[2] = behavior_hm
behavior_init[0] = behavior_xs_init
behavior_init[1] = behavior_ls_init
behavior_init[2] = behavior_hm_init

orb_sprite[0] = orb1_SPR
orb_sprite[1] = orb2_SPR
orb_sprite[2] = orb3_SPR

// create orbs in pairs
orbs = 6

for (i = 0; i &lt; orbs; i++) {
    orb[i] = instance_create(0,0,boss_1_orb_OBJ)
    orb[i].owner = self.id
    orb[i].sprite_index = orb_sprite[i mod 3]
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

image_index = 0

if (active == 0) {
    if (x &lt;= room_width - 48) {
        direction = 90
        active = 1
        for (var i = 0; i &lt; 6; i++) orb[i].invincible = 0
    }
}

if (orbs &gt; 0) {
    // phase 1
    hp = 1000
    for (var i = 0; i &lt; 6; i++) {
        if (instance_exists(orb[i])) hp += orb[i].hp
    }
    
    if (y &lt; 48) direction = 270
    else if (y &gt; room_height - 48 - 16) direction = 90
    
    if (rotating == 1) {
        angle = (angle+rot_spd) mod 360
        for (var i = 0; i &lt; 6; i++) if (instance_exists(orb[i])) {
            orb[i].angle = (angle + 90 - i*60) mod 360
            if (orb[i].angle &lt; 0) orb[i].angle += 360
        }
    }
    
    if (active) {
        if (rotating == 1 &amp;&amp; (angle mod 60) == 0) {
            rotating = 0
            cur = angle / 60
            script_execute(behavior_init[cur mod 3])
        }
        
        if (rotating == 0) script_execute(behavior[cur mod 3])
    }

} else {
    // phase 2, no orbs
    invincible = 0
    if (target_x == 0 &amp;&amp; target_y == 0) {
        // select a target
        do {
            target_x = room_width/2 + 32 + irandom(room_width/2 - 2*32)
            target_y = 32 + irandom(room_height - 16 - 2*32)
        } until (point_distance(x,y,target_x,target_y) &gt; 15*4)
        direction = point_direction(x,y,target_x,target_y)
    } 
    
    // AI state machine
    if (state == 0) {
        // tracking to a point
        // speed up as we lose health (from 1 to 4)
        speed = ((1000 - hp) / 1000)*3 + 1
        
        // check for line of sight with a friendly
        friendly = instance_nearest(x,y,friendly_PAR)
        if (friendly != noone) {
            if (abs(friendly.y - y) &lt; 4) {
                // We got it, lasershot!
                speed = 0
                state = 2
            }
        }
        // if we didn't get LoS
        if (state == 0) {
            if (point_distance(x,y,target_x,target_y) &lt; speed) {
                // we got to our target point
                x = target_x
                y = target_y
                
                // now spinfire
                speed = 0
                state = 1
            }
        }
    }
    else if (state == 1) {
        // TODO: spinfire
        
        for (var i = 0; i &lt; 360; i += 10) {
            bx = 32*cos(degtorad(i))
            by = -32*sin(degtorad(i))
            b = instance_create(x+bx,y+by,en_missile1_OBJ)
            b.speed = 5
            b.direction = i
        }
        audio_play_sound(en_missile1_SND,0,0)
        
        // Back to state 0
        state = 0
        // Also reset our target
        target_x = 0
        target_y = 0
    }
    else if (state == 2) {
        // lasershot
        
        if (counter_ls &lt; 5*image_number) {
            // opening laser hatch
            image_index = floor(counter_ls/5)
            counter_ls++
            //laser charge particle creation
            instance_create(x+choose(1,-1)*(random(48)),y+choose(1,-1)*(random(48)),boss_charge_part_OBJ)
            instance_create(x+choose(1,-1)*(random(48)),y+choose(1,-1)*(random(48)),boss_charge_part_OBJ)
            instance_create(x+choose(1,-1)*(random(48)),y+choose(1,-1)*(random(48)),boss_charge_part_OBJ)
            audio_play_sound(pl_laser_charge_SND,0,0)
        }
        else if (counter_ls == 5*image_number) {
            // fire laser
            image_index = image_number-1
            projectile_ls = instance_create(x-16,y,boss_lasershot_OBJ)
            projectile_ls.creator = self.id
            counter_ls += 5
        }
        else if (instance_exists(projectile_ls)) {
            // firing, keep hatch open
            image_index = image_number-1
        }
        else {
            // close the hatch
            image_index = floor((2*(5*image_number) - counter_ls)/5)
            if (image_index == 0) {
                // back to state 1 (spinshot)
                counter_ls = 0
                state = 1
            }
            else {
                counter_ls++
            }
        }
    }
}



























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y)
if (invincible == 1) {
    // draw shield sprite
    draw_sprite_ext(boss_shield_SPR,shield_frm,x,y,1.2,1.2,0,c_white,1)
    shield_frm = (shield_frm + 1) mod 8
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,8</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
